import numpy as np
from track import Track

class TrackerEngine:
    """
    Tracking engine to parse observations and do the matching.
    
    Attrs:
        tracks: List of track objects in the pool currently
        observations: List of list of observations in each frame
    
    """
    
    def __init__(self, beta, observations):
        """
        Initializes the tracker engine.
        
        Args:
            beta (scalar): Fixed threshold probability
            observations([[(mx1),]]): Variable sized list of list of observations, each an mx1 observation vector
            
        Returns:
            Nothing
        """
        self.beta = beta
        self.tracks = []
        self.observations = observations
        
    def likelihood_mat(self, tracks, obs):
        """
        Calculate the likelihood matrix of each measurement being generated by each observation
        
        Args:
            trackers [Track,]: Variable sized list of trackers in the current frame
            obs ([(mx1),]): Variable sized list of mx1 observation vectors for current frame
            
        Returns:
            likelihood_mat (num_trackers, num_obs): Likelihood matrix of  
        """
        l_mat = np.zeros((len(tracks), len(obs)))

        for i in range(len(tracks)):
            for j in range(len(obs)):
                l_mat[i,j] = tracks[i].likelihood(obs[j])
        
        return l_mat
        
    def match_mat(self, l_mat):
        """
        Matches trackers to indices based on the likelihood matrix.
        Matching strategies: {'greedy' | 'hungarian' | 'jdpa'}
        
        Args:
            likelihood_mat (num_trackers, num_obs): Likelihood of each tracker generating each detection
            
        Returns:
            match_mat (num_trackers, num_obs): Binary matrix specifying which tracker matches which detection
        """
        match_mat = np.zeros(l_mat.shape)

        for j in range(match_mat.shape[1]):

            t_idx = l_mat[:,j].argmax()
            score = l_mat[t_idx, j]

            if score>self.beta:
                match_mat[t_idx, j] = 1

        return match_mat
    
    def update_trackers(self, obs, match_mat):
        """
        Updates the trackers based on the matching with detections.
        If match found, runs the tracker's update function.
        Else a new tracker is instantiated.
        
        Args:
            obs: List of mx1 observations
            match_mat (num_trackers, num_obs): Binary matrix specifying which tracker matches which detection
            
        Returns:
            Nothing
        """
        print('kuch nahin karta ye method')
        print(self.tracks)
        
        print(match_mat)
        
        for j in range(match_mat.shape[1]):
            total = match_mat[:,j].sum()
            
            if total>0:
                t_idx = match_mat[:,j].argmax()
                self.tracks[t_idx].update(obs[j])
                
            else:
                # Pop new tracker ontop of the queue of trackers
                t = Track(np.matrix([obs[j].item(), 0.]).T, np.matrix('1000. 0.; 0. 1000.'))
                self.tracks.append(t)
    
    def run(self):
        """
        1. Loops over the list of observations to get current frame detections
        2. Computes likelihood matrix
        3. Computes match matrix based on the likelihood matrix and choice of matching strategy
        4. Updates tracks based on the match matrix result. Should have an edge case for 0 track size.
        5. Stores x estimates in another array which can then be printed.
        """
        pass
        # THis is just a stupid for loop 